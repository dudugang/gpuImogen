#!/bin/bash
# 1: "serial"
# +- 2: runfile 
# +- 3: output stream #
# +- 4: GPU # to use
#
# 1: "parallel"
# +- 2 = runfile
# +- 3 = output stream #
# +- 4 = optionally np
#
# 1: "cluster"
# +- 2 = runfile
# +- 3 = output stream #
# +- 4 = #nodes
# +- 5 = PPN
# +- 6 = optionally np (default = nodes*ppn)

# --- Test for results directory --- #
resDir="${HOME}/Results"
if [ -d $resDir ]; then
  activeResDir=$resDir
else
  mkdir "${HOME}/Results/"
  echo ">>> WARNING: No Results directory found. One has been created."
fi

if [ -z "${1}" ]; then
  echo ">>> ERROR: No input specified. How to run (./imogen help):"
  ./imogen help
  exit 1
fi

if [ ${1} = "help" ]; then
  echo "       /=============\\"
  echo "+----=< *IMOGEN HELP* >=======----------------------------------------"
  echo "|      \\=============/"
  echo "|"
  echo "| Serial operation: ./imogen serial   runfile streamnumber GPUnumber"
  echo "| Local parallel:   ./imogen parallel runfile streamnumber #procs"
  echo "| Cluster submit:   ./imogen cluster  runfile streamnumber nodes ppn [np] [queue]"
  echo "|                   (tees realtime output to ~/imogenout)"
  echo "|"
  echo "|    Serial and local parallel operation execute directly; Cluster"
  echo "|    operation makes request to qsub."
  echo "|"
  echo "+==============================---------------------------------------"

  exit 0
fi

# --- Check for input file argument --- #
if [ -z "${2}" ]; then
  echo ">>> WARNING: Only runfile specified; Doing ./imogen serial ${2} 0 0"
  ./imogen serial ${2} 0 0
  exit 0
fi
RUNFILE=${2}

# --- Determine stream output --- #
stream=${3}
if [ -z "$3" ]; then
  stream="1"
fi
redirectStr="${HOME}/Results/logfile${stream}.out"

if [ -f "$redirectStr" ]; then
  echo ">>> WARNING: requested output stream exists; Appending."
fi


if [ ${1} = "serial" ]; then
  # ./imogen serial runfile stream GPU#
  gpuno=${4}
  if [ -z "$4" ]; then
    gpuno=0
  fi

  echo "imogenLoad('${RUNFILE}','${redirectStr}','${alias}',$gpuno);" | nohup nice matlab -nodisplay -nojvm >> $redirectStr & 
  exit 0
fi

if [ ${1} = "parallel" ]; then
  # ./imogen parallel runfile stream# nprocs
  numproc=${4}
  if [ -z "$numproc" ]; then
    numproc=1
    echo ">>> WARNING: Parallel run defaulting to np=1"
  fi

  mpirun -np $numproc matlab -nodisplay -nojvm -r "parImogenLoad('${RUNFILE}','${redirectStr}','${alias}', 0);" >> $redirectStr &

  exit 0
fi

if [ ${1} = "cluster" ]; then
# ./imogen cluster runfile stream #nodes PPN [np] queue
  nnodes=${4};
  if [ -z "$4" ]; then nnodes="1"; fi

  procpn=${5};
  if [ -z "$5" ]; then procpn="1"; fi;

  NP=${6}
  if [ -z "$6" ]; then NP=$(expr $nnodes \* $procpn); fi

  QUEUE=${7}
  if [ -z "$7" ]; then QUEUE="gpu"; fi

  TFILE=$(mktemp);
  echo "module load mpi-tor/openmpi-1.4.5_gcc-4.4.6" >> $TFILE
  echo "module load matlab/r2012b" >> $TFILE
  echo "module load cuda" >> $TFILE
  echo "echo PATH: \$PATH" >> $TFILE
  echo "cd $(pwd)" >> $TFILE
  echo "mpirun --mca btl_tcp_if_include torbr --bynode -np $NP matlab -nodisplay -nojvm -r \"parImogenLoad('${RUNFILE}','${redirectStr}','${alias}', 0);\" | tee -a ~/imogenoutB " >> $TFILE

  echo -n "DOING: qsub -q $QUEUE -l nodes=$nnodes:ppn=$procpn, calling mpirun with -np $NP in 4... "
#  echo "Submitting job with -l nodes=$nnodes:ppn=$procpn and mpirun with -np $NP; 4 seconds to abort:"
  sleep 1; echo -n "3... "; sleep 1; echo -n "2... "; sleep 1; echo -n "1... "; sleep 1

  qsub -j oe -q $QUEUE -l nodes=$nnodes:ppn=$procpn $TFILE -o $redirectStr
  #rm $TFILE
  exit 0
fi

echo ">>> ERROR: See top of 'imogen' file for input instructions."
head -n18 imogen

